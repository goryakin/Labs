/*
Створити абстрактний клас MilitaryShip, який реалізує інтерфейс Ship.
- void toBoard(Ship anotherShip), який приймає на вхід корабель, що даний корабель бере на абордаж
- int getPower(), який поверає потужність корабля
MilitaryShip має:
- поле, що зберігає тип корабля (галеон, лінкор, галераб фрегат і т.д.)
- поле, що зберігає назву корабля
- поле, що зберігає кількість одиниць зброї
- поле, що зберігає швидкість корабля
- поле, що зберігає силу корабля (strength)
- поле цілосності корабля (від 0 до 100)
- поле, що зберігає кількість екіпажу
- поле, що зберігає градус напрямку руху (вперед - 0 градусів, протилежний бік - 180 градусів і т.д.)
- константу MAX_SPEED, що зберігає максимальну швидкість. Більше цієї швидкості корабель розвинути не може.
- Метод getPower() має рахувати потужність корабля як (кількість людей * цілісність корабля / 100 * strength)
- Метод toBoard() має порівнювати потужність даного корабля з потужністю корабля, який беруть на абордаж.
 Якщо потужність більша - вивести
  "Перемога! Корабель <назва> взято на абордаж!", інакше "Програш! Нас взяли на абордаж!"
- Метод battle(MilitaryShip ship), який приймає на вхід інший корабель, з яким воюють.
 Кожен корабель по черзі наносить постріл (викликається метод shoot(), який
  генерує випадкове число від 0 до 20 і віднімає від цілосності суперника відповідну кількість одиниць).
  Перемагає той корабель, який перший потопить суперника.
  Кожна дія супроводжується виводом в консоль інформації (наприклад, "Корабель Вікторія наносить шкоду кораблю Марія на 12 одиниць. Цілісність Марії 88", і т.д.)
 */
package OOP.Lesson3.Task2;

public abstract class MilitaryShip implements Shipable{

    String [] typeSgip;
    String nameShip;
    int weapon;
    int speed;
    int strength;
    int integrity = 100; //поле цілосності корабля (від 0 до 100)
    int crew; //екіпаж
    int degreeMove;
    int maxSpeed = 100;
    int powerShip;
    int powerAnotherShip;
    void toBoard(String anotherShip) {
        System.out.println("Взято на абордаж: " +anotherShip);
    }
 //- Метод getPower() має рахувати потужність корабля як (кількість людей * цілісність корабля / 100 * strength)
    int getPower(){
        System.out.println(powerShip = crew*strength); //дописать в офрмулу целостность корябля
        return powerShip;
    }
//toBoard() має порівнювати потужність даного корабля з потужністю корабля, який беруть на абордаж.
    public void toBoard () {
        if (powerShip > powerAnotherShip) {
            System.out.println("Перемога! Корабель <назва> взято на абордаж!");
        } else {
            System.out.println("Програш! Нас взяли на абордаж!");
        }

    }
// - Метод battle(MilitaryShip ship), який приймає на вхід інший корабель, з яким воюють.
    public void  battle (String anotherShip) {

    }
// Кожен корабель по черзі наносить постріл (викликається метод shoot(), який
//  генерує випадкове число від 0 до 20 і віднімає від цілосності суперника відповідну кількість одиниць).
    public void shoot () {
        int damage1 = (int) Math.random()*21;
        int powerShip = - damage1;
        System.out.println("Корабель Вікторія наносить шкоду кораблю Марія на одиниць "+powerShip);

        int damage2 = (int) Math.random()*21;
        int powerAnotherShip = -damage2;
        System.out.println("Корабель Мария наносить шкоду кораблю Вікторія на одиниць " +powerAnotherShip);
    }
}
